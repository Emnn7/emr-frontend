import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

export const generatePatientReport = (patient, appointments, prescriptions, labReports) => {
  const doc = new jsPDF();
  
  // Header
  doc.setFontSize(18);
  doc.setTextColor(40, 40, 40);
  doc.text('MEDICAL REPORT', 105, 20, { align: 'center' });
  doc.setFontSize(12);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 105, 28, { align: 'center' });
  
  // Patient Information
  doc.setFontSize(14);
  doc.text('PATIENT INFORMATION', 14, 40);
  doc.setFontSize(10);
  doc.text(`Name: ${patient.fullName}`, 14, 48);
  doc.text(`Date of Birth: ${new Date(patient.dateOfBirth).toLocaleDateString()}`, 14, 56);
  doc.text(`Gender: ${patient.gender}`, 14, 64);
  doc.text(`Phone: ${patient.phoneNumber}`, 14, 72);
  doc.text(`Address: ${patient.address || 'N/A'}`, 14, 80);
  
  // Medical History
  doc.setFontSize(14);
  doc.text('MEDICAL HISTORY', 14, 95);
  doc.setFontSize(10);
  const medicalHistory = patient.medicalHistory || {};
  const historyY = 103;
  doc.text(`Symptoms: ${medicalHistory.symptomAssessment || 'N/A'}`, 14, historyY);
  doc.text(`Clinical Notes: ${medicalHistory.clinicalInterview || 'N/A'}`, 14, historyY + 8);
  doc.text(`Past History: ${medicalHistory.pastMedicalHistory || 'N/A'}`, 14, historyY + 16);
  doc.text(`Family History: ${medicalHistory.familyHistory || 'N/A'}`, 14, historyY + 24);
  doc.text(`Allergies: ${medicalHistory.allergies || 'None'}`, 14, historyY + 32);
  doc.text(`Current Medications: ${medicalHistory.currentMedications || 'None'}`, 14, historyY + 40);
  
  // Appointments
  doc.setFontSize(14);
  doc.text('APPOINTMENT HISTORY', 14, historyY + 55);
  if (appointments.length > 0) {
    const appointmentData = appointments.map(appt => [
      new Date(appt.appointmentDate).toLocaleDateString(),
      appt.doctorName,
      appt.reason,
      appt.status
    ]);
    doc.autoTable({
      startY: historyY + 63,
      head: [['Date', 'Doctor', 'Reason', 'Status']],
      body: appointmentData,
      theme: 'grid',
      headStyles: { fillColor: [41, 128, 185] },
    });
  } else {
    doc.text('No appointment history', 14, historyY + 63);
  }
  
  // Prescriptions
  doc.setFontSize(14);
  doc.text('PRESCRIPTIONS', 14, doc.autoTable.previous.finalY + 15);
  if (prescriptions.length > 0) {
    const prescriptionData = prescriptions.map(presc => [
      presc.medicationName,
      presc.dosage,
      presc.frequency,
      presc.duration,
      new Date(presc.datePrescribed).toLocaleDateString()
    ]);
    doc.autoTable({
      startY: doc.autoTable.previous.finalY + 20,
      head: [['Medication', 'Dosage', 'Frequency', 'Duration', 'Date']],
      body: prescriptionData,
      theme: 'grid',
      headStyles: { fillColor: [41, 128, 185] },
    });
  } else {
    doc.text('No prescriptions', 14, doc.autoTable.previous.finalY + 15);
  }
  
  // Lab Results
  doc.setFontSize(14);
  doc.text('LAB RESULTS', 14, doc.autoTable.previous.finalY + 15);
  if (labReports.length > 0) {
    const labData = labReports.map(report => [
      report.testName,
      report.result,
      report.unit || '',
      report.normalRange || '',
      new Date(report.dateTested).toLocaleDateString()
    ]);
    doc.autoTable({
      startY: doc.autoTable.previous.finalY + 20,
      head: [['Test', 'Result', 'Unit', 'Normal Range', 'Date']],
      body: labData,
      theme: 'grid',
      headStyles: { fillColor: [41, 128, 185] },
    });
  } else {
    doc.text('No lab results', 14, doc.autoTable.previous.finalY + 15);
  }
  
  // Footer
  doc.setFontSize(10);
  doc.setTextColor(150, 150, 150);
  doc.text('This report was generated by the EMR System', 105, doc.internal.pageSize.height - 10, { align: 'center' });
  
  return doc;
};